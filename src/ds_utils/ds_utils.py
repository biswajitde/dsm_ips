# -*- coding: utf-8 -*-
# Copyright Â© 2018 Trend Micro Incorporated.  All rights reserved.
"""The utilities that are used to generate the reports."""

import os
import json
import traceback
import configparser
from collections import defaultdict
from requests import Session
from zeep import Client
from zeep.transports import Transport
from zeep import helpers
from .report_parser import get_parsed_report
from .nvd_parser import get_parsed_nvd

CVE_SEVERITY_CRITICAL = "Critical"
CVE_SEVERITY_HIGH = "High"
CVE_SEVERITY_MEDIUM = "Medium"
CVE_SEVERITY_LOW = "Low"
CVE_SEVERITY_NONE = "None"
CVE_SEVERITY_UNKOWN = "Unknown"

class APIUtils:
    """The utilities to help call the Deep Security Web Service APIs with given credentials.

    This class will hold a reusable session ID generated by given credentials.
    Therefore, API calls could be done without passing the session ID every time.

    Attributes:
        client: The Web Service Client.
        sid: The session ID.
    """

    def __init__(self):
        # get the web service credentials
        config = configparser.ConfigParser()
        config.read('../config.ini')
        wsdl = config['Web Service Credentials']['wsdl']
        username = config['Web Service Credentials']['username']
        password = config['Web Service Credentials']['password']

        try:
            # create a SOAP client
            session = Session()
            session.verify = False # use your certificate for SSL if needed
            transport = Transport(session=session)
            client = Client(wsdl, transport=transport)

            # get the session ID
            sid = client.service.authenticate(username, password)
        except:
            traceback.print_exc()

        self.client = client
        self.sid = sid

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, exc_tb):
        self.client.service.endSession(self.sid)

    def get_ips_rules(self):
        """Get the list of Deep Security Intrusion Prevention Rules.

        Returns:
            The list of Deep Security Intrusion Prevention Rules.
        """

        ips_rules = self.client.service.DPIRuleRetrieveAll(self.sid)

        result = {}
        for ips_rule in ips_rules:
            # only extract 'identifier', 'name' and 'cveNumbers' of the Deep Security Intrusion Prevention Rule from the response
            result[str(ips_rule['ID'])] = {k: v for k, v in helpers.serialize_object(ips_rule).items() if k in set(['identifier', 'name'])}
            if ips_rule['cveNumbers']:
                result[str(ips_rule['ID'])]['cves'] = ips_rule['cveNumbers'].split(", ")
            else:
                result[str(ips_rule['ID'])]['cves'] = []

        return result

    def get_hosts(self):
        """Get the list of Deep Security Hosts.

        Returns:
            The list of Deep Security Hosts.
        """

        hosts = self.client.service.hostRetrieveAll(self.sid)

        result = {}
        for host in hosts:
            # only extract 'name', 'securityProfileID' and 'hostGroupID' of the Deep Security Host from the response
            result[host['ID']] = {k: v for k, v in helpers.serialize_object(host).items() if k in set(['name', 'securityProfileID', 'hostGroupID'])}

        return result

    def get_host_groups(self):
        """Get the list of Deep Security Host Groups.

        Returns:
            The list of Deep Security Host Groups.
        """

        host_groups = self.client.service.hostGroupRetrieveAll(self.sid)

        result = {}
        for host_group in host_groups:
            # only extract 'name' of the Deep Security Host Group from the response
            result[host_group['ID']] = {k: v for k, v in helpers.serialize_object(host_group).items() if k in set(['name'])}

        return result

    def get_host_status(self, host_id):
        """Get the status of a Deep Security Host.

        Args:
            host_id: The host ID.

        Returns:
            The status of a Deep Security Host.
        """

        #get the status of the host
        host_status = self.client.service.hostGetStatus(host_id, self.sid)

        # only extract 'overallStatus' and 'overallDpiStatus' of the Deep Security Host Status from the response
        result = {k: v for k, v in helpers.serialize_object(host_status).items() if k in set(['overallStatus', 'overallDpiStatus'])}

        return result

    def get_reco_rule_ids_on_host(self, host_id):
        """Get the Intrusion Prevesion Rules that are recommended to assign on the host.

        Args:
            host_id: The host ID.

        Returns:
            The Intrusion Prevesion Rules that are recommended to assign on the host.
        """

#        type 1: APPLICATIONTYPE
#        type 2: PAYLOADFILTER
#        type 3: FIREWALLRULE
#        type 4: INTEGRITYRULE
#        type 5: LOGINSPECTIONRULE
        return self.client.service.hostRecommendationRuleIDsRetrieve(host_id, 2, False, self.sid)

    def get_assigned_rule_ids_on_host(self, host_id):
        """Get the Intrusion Prevesion Rule IDs that are assigned on the host.

        Args:
            host_id: The host ID.

        Returns:
            The Intrusion Prevesion Rules that are assigned on the host.
        """

        host_rules = self.client.service.DPIRuleRetrieveAllByHostID(host_id, self.sid)

        rule_ids = []
        for host_rule in host_rules:
            rule_ids.append(host_rule['ID'])

        return rule_ids

class CVEUtils:
    """The utilities to help know the corresponding Deep Security Intrusion Prevention Rules of CVEs."""

    def __init__(self):
        pass

    @staticmethod
    def get_cve_to_rule_id(ips_rules):
        """Get the object that maps CVEs to Deep Security Intrusion Prevention Rule IDs.

        Args:
            ips_rules: The Deep Security Intrusion Prevention Rules returned by APIUtils.get_ips_rules.

        Returns:
            The object that maps CVEs to Deep Security Intrusion Prevention Rule IDs.
        """

        cve_to_rule_id = defaultdict(list)
        for rule_id, content in ips_rules.items():
            if content['cves']:
                for cve in content['cves']:
                    cve_to_rule_id[cve].append(int(rule_id))

        return cve_to_rule_id

    @staticmethod
    def get_cve_to_rule_name(ips_rules):
        """Get the object that maps CVEs to Deep Security Intrusion Prevention Rule Names.

        Args:
            ips_rules: The Deep Security Intrusion Prevention Rules returned by APIUtils.get_ips_rules.

        Returns:
            The object that maps CVEs to Deep Security Intrusion Prevention Rule Names.
        """

        cve_to_rule_name = defaultdict(list)
        for rule_id, content in ips_rules.items():
            if content['cves']:
                for cve in content['cves']:
                    cve_to_rule_name[cve].append(ips_rules[str(rule_id)]['identifier'] + '-' + ips_rules[str(rule_id)]['name'])

        return cve_to_rule_name

class CacheUtils:
    """The utilities to help get data faster."""

    config = configparser.ConfigParser()
    config.read('../config.ini')
    use_cache = config.getboolean('Other', 'use-cache')

    def __init__(self):
        pass

    @staticmethod
    def _write_tmp_file(filename, content, tmp_path):
        """Write a file to a temp folder, so next time we could read the data faster.

        Args:
            filename: The filename to save.
            content: The content to be saved.
            tmp_path: The path to the temp folder.
        """

        if not os.path.exists(tmp_path):
            os.makedirs(tmp_path)
        with open(os.path.join(tmp_path, filename), "w") as file:
            file.write(json.dumps(content, indent=4))

    @staticmethod
    def get_ips_rules(api_utils, tmp_path):
        """Get the IPS rules from Deep Security.

        Args:
            api_utils: The APIUtils object.
            tmp_path: The path to the temp folder.

        Returns:
            The IPS rules retrieved from Deep Security.
        """

        filename = "ips_rules.json"
        cache = os.path.join(tmp_path, filename)
        if CacheUtils.use_cache and os.path.isfile(cache):
            with open(cache, "r") as file:
                return json.loads(file.read())
        else:
            print("Retrieving the Intrusion Prevention Rules...")
            rules = api_utils.get_ips_rules()
            CacheUtils._write_tmp_file(filename, rules, tmp_path)
            return rules

    @staticmethod
    def get_nvd(nvd_path, tmp_path):
        """Get the parsed NVD data from the NVD website.

        Args:
            nvd_path: The path to the folder which contains the NVD data feeds.
            tmp_path: The path to the temp folder.

        Returns:
            The data that is parsed from the NVD website.
        """

        filename = "nvd.json"
        cache = os.path.join(tmp_path, filename)
        if CacheUtils.use_cache and os.path.isfile(cache):
            with open(cache, "r") as file:
                return json.loads(file.read())

        else:
            nvd = get_parsed_nvd(nvd_path)
            CacheUtils._write_tmp_file(filename, nvd, tmp_path)
            return nvd

    @staticmethod
    def get_vulnerability_report(report_path, tmp_path):
        """Get the report that is parsed from the third-party report.

        Args:
            report_path: The path to the folder which contains the 3rd party report.
            tmp_path: The path to the temp folder.

        Returns:
            The report that is parsed from the third-party report.
        """

        filename = "report.json"
        cache = os.path.join(tmp_path, filename)
        if CacheUtils.use_cache and os.path.isfile(cache):
            with open(cache, "r") as file:
                return json.loads(file.read())
        else:
            report = get_parsed_report(report_path)
            CacheUtils._write_tmp_file(filename, report, tmp_path)
            return report
